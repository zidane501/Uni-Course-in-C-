#ifndef originalSPARSE_VECTOR_HPP
#define originalSPARSE_VECTOR_HPP

#include "originalVector.hpp"
#include "originalMatrix.hpp"

template<class T>
class originalSparseVector{
	public:
		//creates an empty vector of dimensionality 0.
		originalSparseVector();
		// Creates a vector of dimensionality dim. It starts with 0 nonzero elements
		// which need to be set using setValue
		originalSparseVector(unsigned int dim);

		// assignment operators and copy constructor should be automatically
		// generated by the compiler when using a std::vector for internal storing.
		// However, test that assignment works!

		//sets the value v_i of the vector. if it does not exist it is added 
		void setValue(unsigned int index, T value);

		//returns the value v_i of the vector. Returns 0 if the value is not stored
		T getValue(unsigned int index)const;

		//returns the dimensionality of the vector
		unsigned int size()const;

		// returns the number stored elements
		unsigned int nonZeroes()const;
		//returns the index of the ith stored nonzero entry (in increasing order)
		unsigned int indexNonZero(unsigned int i)const;
		//returns the value of the ith stored nonzero entry (in increasing order)
		T valueNonZero(unsigned int i)const;

		//adds x too the current vector
		originalSparseVector<T>& operator+= (originalSparseVector<T> const& x);
		//subtracts x from the current vector
		originalSparseVector<T>& operator-= (originalSparseVector<T> const& x);

		// computes z= x+y, equivalent to z=x, z+=y
		template<class T>
		originalSparseVector<T> operator+(originalSparseVector<T> const& x, originalSparseVector<T> const& y);

		// computes z= x-y, equivalent to z=x, z-=y
		template<class T>
		originalSparseVector<T> operator-(originalSparseVector<T> const& x, originalSparseVector<T> const& y);


		// computes the matrix-vector product of a dense matrix and sparse vector z=Ax.
		// The result is a dense vector.
		template<class T>
		Vector<T> operator* (Matrix<T> const& A, originalSparseVector<T> const& x);

		// computes the matrix-vector product of a dense matrix and sparse vector z=x^TA.
		// The result is a dense vector.
		template<class T>
		Vector<T> operator* (originalSparseVector<T> const& x, Matrix<T> const& A);
	
	private:

	//Add your data members here!

};





#endif